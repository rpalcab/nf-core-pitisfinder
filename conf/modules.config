/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: MERGE_ANNOTATIONS {
        publishDir = [
            path: {"${params.outdir}/annotations/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MOBSUITE_RECON {
        publishDir = [
            path: {"${params.outdir}/plasmids/mobsuite_recon/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PLASMIDFINDER {
        publishDir = [
            path: {"${params.outdir}/plasmids/plasmidfinder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: RENAME_PLASMIDS {
        publishDir = [
            path: {"${params.outdir}/plasmids/summary/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PLASMID_PARSER {
        publishDir = [
            path: {"${params.outdir}/plasmids/summary/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VISUALIZE {
        publishDir = [
            path: {"${params.outdir}/plasmids/summary/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: COPLA_COPLADBDOWNLOAD {
        publishDir = [
            enabled: false
        ]
    }

    withName: COPLA_COPLA {
        publishDir = [
            path: {"${params.outdir}/plasmids/copla/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTEGRONFINDER {
        ext.args = '--func-annot'
        publishDir = [
            path: {"${params.outdir}/integrons/integron_finder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: INTEGRON_PARSER {
        publishDir = [
            path: {"${params.outdir}/integrons/integron_finder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: IS_BLAST {
        publishDir = [
            path: {"${params.outdir}/is/ISFinder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: IS_PARSER {
        publishDir = [
            path: {"${params.outdir}/is/ISFinder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ISESCAN {
        publishDir = [
            path: {"${params.outdir}/is/ISEScan/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHISPY {
        ext.args = '--output_choice 512'
        publishDir = [
            path: {"${params.outdir}/prophages/phispy/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') || filename.endsWith('.log') ? null : filename }
        ]
    }

    withName: PHIGARO_SETUP {
        publishDir = [
            enabled: false
        ]
    }

    withName: PHIGARO {
        ext.args = '-d -p --not-open --save-fasta -e html tsv gff bed stdout'
        publishDir = [
            path: {"${params.outdir}/prophages/phigaro/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: PHASTEST_PHASTESTDBDOWNLOAD {
        publishDir = [
            enabled: false
        ]
    }

    withName: PHASTEST_PHASTEST {
        publishDir = [
            path: {"${params.outdir}/prophages/phastest/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GENOMAD_DOWNLOAD {
        publishDir = [
            enabled: false
        ]
    }

    withName: GENOMAD_ENDTOEND {
        publishDir = [
            path: {"${params.outdir}/prophages/genomad/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: VERIFYMODEL {
        publishDir = [
            enabled: false
        ]
    }

    withName: MACSYFINDER {
        ext.args = '--timeout 30m --db-type ordered_replicon -vv --e-value-search 0.0001'
        publishDir = [
            path: {"${params.outdir}/ICEs/macsyfinder/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ICEBERG_DB_DOWNLOAD {
        publishDir = [
            enabled: false
        ]
    }

    withName: ICEBERG_ICESEARCH {
        publishDir = [
            path: {"${params.outdir}/ICEs/iceberg/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FILTER_FAA {
        publishDir = [
            enabled: false
        ]
    }

    withName: ICEFINDER2 {
        publishDir = [
            path: {"${params.outdir}/ICEs/icefinder2/"},
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

}
